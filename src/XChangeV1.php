<?php


/**
 * Class XChangeV1 at src/XChangeV1.php.
 * File containing XChangeV1 class
 * @api
 * @author Isaac Adzah Sai <isaacsai030@gmail.com>
 * @version 2.5.2
 */

//namespace JimmyJetter\SmbExchange;
namespace Korba;

use Illuminate\Support\Arr;
use Illuminate\Support\Facades\Log;

/**
 * Class XChangeV1 makes interruption with exchange easier.
 * @todo Write the Docs
 * @package Korba
 */
class XChangeV1 extends API
{
    protected $secret_key;
    protected $client_key;
    protected $client_id;
//    protected static $live_url = 'https://xchange.korbaweb.com/api/v1.0';
//    protected static $aws_url = 'http://internal-awseb-e-e-awsebloa-kxexw3t2bgt7-1521297916.eu-west-1.elb.amazonaws.com/api/v1.0';

    public function __construct($secret_key, $client_key, $client_id, $mode = 'test', $proxy = null)
    {
        $headers = array(
            'Cache-Control: no-cache',
            'Content-Type: application/json'
        );
        if ($mode == 'test') {
            $url = env('TEST_URL');
        } elseif ($mode == '365Xchange') {
            $url = "https://xchange.korba365.com/api/v1.0";
        } else {
            $url = env('LIVE_URL');
        }
        parent::__construct($url, $headers, $proxy);
        $this->secret_key = $secret_key;
        $this->client_key = $client_key;
        $this->client_id = $client_id;
    }

    private function getHMACHeader($data)
    {
        $data = (gettype($data) == 'string') ? json_decode($data, true) : $data;
        $data = array_merge($data, ['client_id' => $this->client_id]);
        $message = '';
        $i = 0;
        ksort($data);
        foreach ($data as $key => $value) {
            $message .= ($i == 0) ? "{$key}={$value}" : "&{$key}={$value}";
            $i++;
        }
        $hmac_signature = hash_hmac('sha256', $message, $this->secret_key);
        return ["Authorization: HMAC {$this->client_key}:{$hmac_signature}"];
    }


    private function getHmacValue($data)
    {
        $data = (gettype($data) == 'string') ? json_decode($data, true) : $data;
        $data = array_merge($data, ['client_id' => $this->client_id]);
        $message = '';
        $i = 0;
        ksort($data);
        foreach ($data as $key => $value) {
            $message .= ($i == 0) ? "{$key}={$value}" : "&{$key}={$value}";
            $i++;
        }
        $hmac_signature = hash_hmac('sha256', $message, $this->secret_key);
        return "{$this->client_key}:{$hmac_signature}";
    }

    protected function call($endpoint, $data, $extra_headers = null, $timeout = 20, $connection_timeout = 5)
    {
        $data = array_merge($data, ['client_id' => $this->client_id]);
        $extra_headers = ($extra_headers) ? array_merge($extra_headers, $this->getHMACHeader($data)) : $this->getHMACHeader($data);
        return parent::call($endpoint, $data, $extra_headers, $timeout, $connection_timeout);
    }

    protected function add_optional_data(&$data, $optional_data)
    {
        foreach ($optional_data as $key => $value) {
            if ($optional_data[$key]) {
                $data[$key] = $value;
            }
        }
    }

    public function networkLookup($phoneNumber)
    {
        return Util::checkNetworkName(parent::networkLookup($phoneNumber));
    }

    public function nameNetworkLookup($phoneNumber)
    {
        return parent::nameNetworkLookup($phoneNumber);
    }

    public function phoneNumberNameLookup($phoneNumber)
    {
        return parent::phoneNumberNameLookup($phoneNumber); // TODO: Change the autogenerated stub
    }

    public function collect(
        $customer_number, $amount, $transaction_id, $network_code, $callback_url,
        $vodafone_voucher_code = null, $description = null, $payer_name = null, $extra_info = null, $redirect_url = null)
    {
        $data = [
            'customer_number' => Util::numberGHFormat($customer_number),
            'amount' => $amount,
            'transaction_id' => $transaction_id,
            'network_code' => $network_code,
            'callback_url' => $callback_url,
        ];
        $opt_data = [
            'vodafone_voucher_code' => $vodafone_voucher_code,
            'description' => $description,
            'payer_name' => $payer_name,
            'extra_info' => $extra_info,
            'redirect_url' => $redirect_url
//            'is_ussd' => $is_ussd
        ];
//        dd(['collection_payload: '.json_encode(array_merge($data, $opt_data))]);
        Log::info('collection_payload: ' . json_encode(array_merge($data, $opt_data)));
        $this->add_optional_data($data, $opt_data);
        return $this->call('collect/', $data);
    }


    public function ovaBalance()
    {
        return $this->call('get_ova_balance/', []);
    }

    public function ovaTransfer($recipient, $amount, $payer_name = null, $extra_info = null, $transaction_id = null)
    {
        $data = [
            'recipient' => $recipient,
            'amount' => $amount,
        ];

        $opt_data = [
            'transaction_id' => $transaction_id,
            'payer_name' => $payer_name,
            'extra_info' => $extra_info,
        ];
        Log::info('ova_transfer_payload: ' . json_encode(array_merge($data, $opt_data)));
        $this->add_optional_data($data, $opt_data);
        return $this->call('ova_transfer/', $data);
    }

    public function disburse(
        $customer_number, $amount, $transaction_id, $network_code, $callback_url,
        $description = null, $extra_info = null, $bank_account_number = null, $bank_account_name = null,
        $bank_name = null, $bank_branch_name = null, $payer_name = null, $payer_mobile = null, $bank_code = null)
    {

        if ($network_code == 'ISP') // bank disbursement
        {
            $data = [
//                'customer_number' => $customer_number,
                'amount' => $amount,
                'transaction_id' => $transaction_id,
                'network_code' => $network_code,
                'callback_url' => $callback_url
            ];
            $opt_data = [
                'description' => $description,
                'extra_info' => $extra_info,
                'payer_name' => $payer_name,
                'payer_mobile' => $payer_mobile,
                'bank_code' => $bank_code,
                'recipient_bank_name' => $bank_name,
                'bank_account_number' => $bank_account_number,
                'bank_account_name' => $bank_account_name,
//                'bank_branch_name' => $bank_branch_name,
            ];
        } else { // Mobile money disbursement
            $data = [
                'customer_number' => $customer_number,
                'amount' => $amount,
                'transaction_id' => $transaction_id,
                'network_code' => $network_code,
                'callback_url' => $callback_url
            ];
            $opt_data = [
                'description' => $description,
                'extra_info' => $extra_info,
                'payer_name' => $payer_name,
                'payer_mobile' => $payer_mobile,
            ];
        }

        Log::info('disbursement_payload: ' . json_encode(array_merge($data, $opt_data)));
        $this->add_optional_data($data, $opt_data);
        return $this->call('disburse/', $data);
    }

    public function top_up(
        $customer_number, $amount, $transaction_id, $network_code, $callback_url,
        $description = null, $payer_name = null, $extra_info = null)
    {
        $data = [
            'customer_number' => $customer_number,
            'amount' => $amount,
            'transaction_id' => $transaction_id,
            'network_code' => $network_code,
            'callback_url' => $callback_url
        ];
        $opt_data = [
            'description' => $description,
            'payer_name' => $payer_name,
            'extra_info' => $extra_info
        ];
        $this->add_optional_data($data, $opt_data);
        return $this->call('topup/', $data);
    }

    private function internet_bundle_data(
        $customer_number, $transaction_id, $bundle_id, $amount, $callback_url,
        $description = null, $payer_name = null, $extra_info = null)
    {
        $data = [
            'customer_number' => $customer_number,
            'transaction_id' => $transaction_id,
            'bundle_id' => $bundle_id,
            'amount' => $amount,
            'callback_url' => $callback_url
        ];
        $opt_data = [
            'description' => $description,
            'payer_name' => $payer_name,
            'extra_info' => $extra_info
        ];
        $this->add_optional_data($data, $opt_data);
        return $data;
    }

    public function surfline_purchase(
        $customer_number, $transaction_id, $bundle_id, $amount, $callback_url,
        $description = null, $payer_name = null, $extra_info = null)
    {
        $data = $this->internet_bundle_data(
            $customer_number, $transaction_id, $bundle_id, $amount, $callback_url,
            $description, $payer_name, $extra_info);
        return $this->call('purchase_surfline_bundle/', $data);
    }

    public function surfline_new_purchase(
        $customer_number, $transaction_id, $bundle_id, $amount, $callback_url,
        $description = null, $payer_name = null, $extra_info = null)
    {
        $data = $this->internet_bundle_data(
            $customer_number, $transaction_id, $bundle_id, $amount, $callback_url,
            $description, $payer_name, $extra_info);
        return $this->call('new_purchase_surfline/', $data);
    }

    public function surfline_final_purchase(
        $customer_number, $transaction_id, $bundle_id, $amount, $callback_url,
        $description = null, $payer_name = null, $extra_info = null)
    {
        $data = $this->internet_bundle_data(
            $customer_number, $transaction_id, $bundle_id, $amount, $callback_url,
            $description, $payer_name, $extra_info);
        return $this->call('purchase_final_surfline_bundle/', $data);
    }

    public function surfline_bundles($customer_number)
    {
        $data = [
            'customer_number' => $customer_number
        ];
        $result = $this->call('get_surfline_bundles/', $data);
        if (isset($result['success']) && $result['success']) {
            $list = [];
            foreach ($result['bundles'] as $bundle) {
                array_push($list, [
                    'id' => $bundle['bundle_id'],
                    'description' => $bundle['description'],
                    'price' => $bundle['price'],
                    'validity' => $bundle['validity']
                ]);
            }
            return [
                'success' => true,
                'bundles' => $list
            ];
        }
        return $result;
    }

    public function surfline_updated_bundles($customer_number, $filter = null)
    {
        $data = [
            'customer_number' => $customer_number
        ];
        $result = $this->call('get_updated_surfline_bundles/', $data);
        if (isset($result['success']) && $result['success'] && in_array($filter, array('AlwaysON', 'Unlimited', 'All Weather'))) {
            $list = [];
            if (isset($result['bundles'][$filter])) {
                foreach ($result['bundles'][$filter] as $bundle) {
                    array_push($list, [
                        'id' => $bundle['bundle_id'],
                        'description' => "{$bundle['description']} - GHC {$bundle['price']} - {$bundle['validity']}",
                        'price' => $bundle['price'],
                        'validity' => $bundle['validity']
                    ]);
                }
            }
            return [
                'success' => true,
                'bundles' => $list
            ];
        }
        return $result;
    }

    public function surfline_final_bundles($customer_number, $filter = null)
    {
        $data = [
            'customer_number' => $customer_number
        ];
        $result = $this->call('get_final_surfline_bundles/', $data);
//        return $result;
        if (isset($result['success']) && $result['success'] && in_array($filter, array('AlwaysON', 'Unlimited', 'AllWeather'))) {
            $list = [];
            if (isset($result['bundles'][$filter])) {
                foreach ($result['bundles'][$filter] as $bundle) {
                    array_push($list, [
                        'id' => $bundle['bundle_id'],
                        'description' => "{$bundle['description']} - GHC {$bundle['price']} - {$bundle['validity']}",
                        'price' => $bundle['price'],
                        'validity' => $bundle['validity']
                    ]);
                }
            }
            return [
                'success' => true,
                'bundles' => $list
            ];
        }
        return $result;
    }

    public function busy_purchase(
        $customer_number, $transaction_id, $bundle_id, $amount, $callback_url,
        $description = null, $payer_name = null, $extra_info = null)
    {
        $data = $this->internet_bundle_data(
            $customer_number, $transaction_id, $bundle_id, $amount, $callback_url,
            $description, $payer_name, $extra_info);
        return $this->call('purchase_busy_bundle/', $data);
    }

    public function busy_updated_purchase(
        $customer_number, $transaction_id, $bundle_id, $amount, $callback_url,
        $description = null, $payer_name = null, $extra_info = null)
    {
        $data = $this->internet_bundle_data(
            $customer_number, $transaction_id, $bundle_id, $amount, $callback_url,
            $description, $payer_name, $extra_info);
        return $this->call('updated_purchase_busy_bundle/', $data);
    }

    public function busy_bundles($customer_number)
    {
        $data = [
            'customer_number' => $customer_number
        ];
        $result = $this->call('get_busy_bundles/', $data);
        if (isset($result['success']) && $result['success']) {
            $list = [];
            foreach ($result['list'] as $bundles) {
                foreach ($bundles['Bundle'] as $bundle) {
                    foreach ($bundle as $item) {
                        array_push($list, [
                            'id' => $item['PricePlanCode'],
                            'description' => $item['PricePlanName'],
                            'price' => $item['SalesPrice']
                        ]);
                    }
                }
            }
            return [
                'success' => true,
                'bundles' => $list
            ];
        }
        return $result;
    }

    public function busy_updated_types($customer_number)
    {
        $data = [
            'customer_number' => $customer_number
        ];
        $result = $this->call('get_updated_busy_bundles/', $data);
        Log::debug(json_encode($result));
        if (isset($result['success']) && $result['success'] == true) {
            $list = [];
            foreach ($result['data']['list'] as $bundles) {
                array_push($list, $bundles['OfferGroupName']);
            }
            $out = [
                'success' => true,
                'bundles' => $list
            ];
            return $out;
        }
        return $result;
    }

    public function busy_updated_bundles($customer_number, $number)
    {
        $data = [
            'customer_number' => $customer_number
        ];
//        $result = $this->call('get_updated_busy_bundles/', $data);
        $result = $this->call('get_updated_busy_bundles/', $data);
        if (isset($result['success']) && $result['success']) {
            $list = [];
            foreach ($result['data']['list'] as $key => $bundles) {
                if ($key == $number - 1) {
                    foreach ($bundles['Bundle']['BundleList'] as $item) {
                        array_push($list, [
                            'id' => $item['PricePlanCode'],
                            'description' => " {$item['PricePlanName']} - GHC {$item['SalesPrice']}",
                            'price' => $item['SalesPrice']
                        ]);
                    }
                }
            }
            return [
                'success' => true,
                'bundles' => $list
            ];
        }
        return $result;
    }

    public function busy_updated_balance($customer_number)
    {
        $data = [
            'customer_number' => $customer_number
        ];

        return $this->call('new_check_busy_balance/', $data);
    }

    public function telesol_purchase(
        $customer_number, $transaction_id, $bundle_id, $amount, $callback_url,
        $description = null, $payer_name = null, $extra_info = null)
    {
        $data = $this->internet_bundle_data(
            $customer_number, $transaction_id, $bundle_id, $amount, $callback_url,
            $description, $payer_name, $extra_info);
        return $this->call('purchase_telesol_bundle/', $data);
    }

    public function telesol_bundles()
    {
        return $this->call('get_telesol_bundles/', []);
    }

    public function ecg_pay(
        $customer_number, $transaction_id, $amount, $callback_url,
        $description = null, $payer_name = null, $extra_info = null)
    {
        $data = [
            'customer_number' => $customer_number,
            'transaction_id' => $transaction_id,
            'amount' => $amount,
            'callback_url' => $callback_url
        ];
        $opt_data = [
            'description' => $description,
            'payer_name' => $payer_name,
            'extra_info' => $extra_info
        ];
        $this->add_optional_data($data, $opt_data);
        return $this->call('ecg_pay_bill/', $data);
    }

    public function gwcl_lookup($customer_number, $account_number, $transaction_id)
    {
        $data = [
            'customer_number' => Util::number233Format($customer_number),
            'account_number' => $account_number,
            'transaction_id' => $transaction_id
        ];
        return $this->call('gwcl_customer_lookup/', $data);
    }

    public function gwcl_pay($transaction_id, $amount, $callback_url, $description = null)
    {
        $data = [
            'transaction_id' => $transaction_id,
            'amount' => $amount,
            'callback_url' => $callback_url,
//            'gwcl_lookup_session_id' => $gwcl_transaction_id,
        ];
        $opt_data = ['description' => $description];
        $this->add_optional_data($data, $opt_data);
        return $this->call('gwcl_pay_bill/', $data);
    }

    private function internet_product_data(
        $customer_number, $transaction_id, $product_id, $amount, $callback_url,
        $description = null, $payer_name = null, $extra_info = null)
    {
        $data = [
            'customer_number' => $customer_number,
            'transaction_id' => $transaction_id,
            'product_id' => $product_id,
            'amount' => $amount,
            'callback_url' => $callback_url
        ];
        $opt_data = [
            'description' => $description,
            'payer_name' => $payer_name,
            'extra_info' => $extra_info
        ];
        $this->add_optional_data($data, $opt_data);
        return $data;
    }

    public function mtn_purchase(
        $customer_number, $transaction_id, $product_id, $amount, $callback_url,
        $description = null, $payer_name = null, $extra_info = null)
    {
        $data = $this->internet_product_data(
            $customer_number, $transaction_id, $product_id, $amount, $callback_url,
            $description, $payer_name, $extra_info);
        return $this->call('mtn_data_topup/', $data);
    }

    public function mtn_bundles($filter = null)
    {
        $result = $this->call('get_mtndata_product_id/', []);
        $list = [];
        if (isset($result['success']) && $result['success']) {
//            foreach ($result['bundles'][0]['bundles'] as $bundle) {
            foreach ($result['bundles'] as $bundle) {
                foreach ($bundle['bundles'] as $data) {

                    $list[] = [
//                    $bundle
                        'name' => $bundle['name'],
                        'id' => $data['product_id'],
//                    'description' => "{$data['name']} @ GHC {$data['amount']}",
                        'description' => "{$data['name']}",
                        'price' => $data['amount'],
//                    'volume' => $data['volume'],
//                    'validity' => $data['validity'],

//                    'short_description' => preg_replace('/^MTN ((Daily)|(Weekly)|(Monthly)|(YouTube)) Data Bundle /', '', $bundle['name'],)
                    ];
                }
            }
            $list = $this->mtn_filter($list, $filter);
            return [
                'success' => true,
                'bundles' => $list
            ];
        }
        return $result;
    }

    private function mtn_filter($bundles, $filter = null)
    {
        if (in_array($filter, ['data_bundles', 'kokrokoo', 'social', 'video'])) {
            if ($filter == 'data_bundles') {
                $result = array_filter($bundles, function ($product) {
                    return preg_match("/^MTNDB*/", $product['id']);
                });
            } else if ($filter == 'kokrokoo') {
                $result = array_filter($bundles, function ($product) {
                    return preg_match("/^KOKROKOO*/", $product['id']);
                });
            } else if ($filter == 'social') {
                $result = array_filter($bundles, function ($product) {
                    return preg_match("/^MTNSMB*/", $product['id']);
                });
            } else if ($filter == 'video') {
                $result = array_filter($bundles, function ($product) {
                    return preg_match("/^MTNVB*/", $product['id']);
                });
            }
            return array_values($result);
        }
        return $bundles;
    }

    public function mtn_fibre_purchase(
        $customer_number, $transaction_id, $product_id, $amount, $callback_url,
        $description = null, $payer_name = null, $extra_info = null)
    {
        $data = $this->internet_product_data(
            $customer_number, $transaction_id, $product_id, $amount, $callback_url,
            $description, $payer_name, $extra_info);
        return $this->call('mtn_fibre_topup/', $data);
    }

    public function mtn_fibre_bundles()
    {
        $result = $this->call('get_mtnfibre_product_id/', []);
        $list = [];
        if (isset($result['success']) && $result['success']) {
            foreach ($result['bundles'] as $bundle) {
                array_push($list, [
                    'id' => $bundle['product_id'],
                    'price' => $bundle['amount'],
//                    'description' => "{$bundle['name']} - GHC " . preg_replace('/.00/', '', $bundle['amount'])
                    'description' => "{$bundle['name']} - GHC {$bundle['amount']}"
                ]);
            }
            return [
                'success' => true,
                'bundles' => $list
            ];
        }
        return $result;
    }

    public function vodafone_bundles($filter = null)
    {
        $result = $this->call('get_vodafonedata_product_id/', []);
        if (isset($result['success']) && $result['success']) {
            $list = [];
            foreach ($result['bundles'] as $bundle) {
                array_push($list, [
                    'id' => $bundle['bundle_size'],
                    'price' => $bundle['amount'],
                    'description' => " {$bundle['bundle_size']} - GHC {$bundle['amount']} - {$bundle['validity']}",
                    'size' => $bundle['bundle_size'],
                    'validity' => $bundle['validity'],
                    'name' => $bundle['name']
                ]);
            }

            if ($filter != null && in_array($filter, ['daily', 'weekly', 'monthly'])) {
                $list = array_filter($list, function ($value) use ($filter) {
                    $validity = explode(' ', $value['validity']);
                    if ($filter == 'daily') {
                        return intval($validity[0]) >= 1 && intval($validity[0]) < 7;
                    } else if ($filter == 'weekly') {
                        return intval($validity[0]) >= 7 && intval($validity[0]) < 30;
                    } else {
                        return intval($validity[0]) >= 30;
                    }
                });
                $list = array_values($list);
            }

            return [
                'success' => true,
                'bundles' => $list
            ];
        }
        return $result;
    }

    public function new_vodafone_bundles($filter = null)
    {
        $result = $this->call('new_get_vodafonedata_product_id/', []);

        if (isset($result['success']) && $result['success']) {
            $list = [];
            foreach ($result['bundles'] as $bundle) {
                $list[] = [
                    'id' => $bundle['bundle_id'],
                    'price' => $bundle['amount'],
//                    'description' => " {$bundle['bundle_size']} @ GHC {$bundle['amount']} - {$bundle['validity']}",
                    'description' => $bundle['validity'] == 'No Expiry' ?
                        "{$bundle['bundle_size']} @ GHC {$bundle['amount']}" :
                        "{$bundle['bundle_size']} @ GHC {$bundle['amount']} - {$bundle['validity']}",
                    'size' => $bundle['bundle_size'],
                    'category' => $bundle['category'],
                    'validity' => $bundle['validity'],
                    'name' => $bundle['name']
                ];
            }

            if ($filter != null && in_array($filter, ['DAILY', 'WEEKLY', 'MONTHLY', 'NO EXPIRY', 'NIGHT', 'HOURLY'])) {
                $list = array_filter($list, function ($value) use ($filter) {
                    return $value['category'] == $filter;
                });

                $list = array_values($list);
            }

            return [
                'success' => true,
                'bundles' => $list
            ];
        }

        return $result;
    }

    public function vodafone_bundle_types()
    {
        $response = self::new_vodafone_bundles();
    }

    public function vodafone_purchase($customer_number, $transaction_id, $amount, $callback_url,
                                      $description = null, $payer_name = null, $extra_info = null)
    {
        $data = [
            'customer_number' => $customer_number,
            'transaction_id' => $transaction_id,
            'amount' => $amount,
            'callback_url' => $callback_url
        ];
        $opt_data = [
            'description' => $description,
            'payer_name' => $payer_name,
            'extra_info' => $extra_info
        ];
        $this->add_optional_data($data, $opt_data);
        return $this->call('vodafone_data_topup/', $data);
    }

    public function new_vodafone_purchase($customer_number, $transaction_id, $bundle_id, $amount, $callback_url,
                                          $description = null, $payer_name = null, $extra_info = null)
    {
        $data = [
            'customer_number' => $customer_number,
            'transaction_id' => $transaction_id,
            'bundle_id' => $bundle_id,
            'amount' => $amount,
            'callback_url' => $callback_url
        ];
        $opt_data = [
            'description' => $description,
            'payer_name' => $payer_name,
            'extra_info' => $extra_info
        ];
        $this->add_optional_data($data, $opt_data);
        return $this->call('new_vodafone_data_topup/', $data);
    }

    public function vodafone_bill_payment_customer_info($account_number)
    {
        $data = ['account_number' => $account_number];
        return $this->call('vodafone_bill_payment/get_customer_info/', $data);
    }

    public function vodafone_bill_payment_check_balance($account_number)
    {
        $data = ['account_number' => $account_number];
        return $this->call('vodafone_bill_payment/check_balance/', $data);
    }

    public function vodafone_bill_payment_get_unbilled($account_number)
    {
        $data = ['account_number' => $account_number];
        return $this->call('vodafone_bill_payment/get_unbilled/', $data);
    }

    public function vodafone_bill_payment_outstanding($account_number)
    {
        $data = ['account_number' => $account_number];
        return $this->call('vodafone_bill_payment/get_outstanding/', $data);
    }

    public function vodafone_bill_payment($account_number, $amount, $callback_url, $payment_mode, $transaction_id, $description = "")
    {
        $data = [
            'account_number' => $account_number,
            'amount' => $amount,
            'transaction_id' => $transaction_id,
            'callback_url' => $callback_url,
            'payment_mode' => $payment_mode,
            'description' => $description
        ];
        Log::info('VODAFONE_BILL_PAYMENT_PAYLOAD: ' . json_encode($data));
        return $this->call('vodafone_bill_payment/do_payment/', $data);
    }


    public function airteltigo_purchase(
        $customer_number, $transaction_id, $product_id, $amount, $callback_url,
        $description = null, $payer_name = null, $extra_info = null)
    {
        $data = $this->internet_product_data(
            $customer_number, $transaction_id, $product_id, $amount, $callback_url,
            $description, $payer_name, $extra_info);
        return $this->call('airteltigo_data_topup/', $data);
    }

    public function airteltigo_bundle_types()
    {
        $result = $this->call('get_airteltigo_internet_bundles/', []);
        $types = [];
        if (isset($result['success']) && $result['success'] == true) {
            foreach ($result['results'] as $result) {
                array_push($types, $result['name']);
            }
            return $types;
        }
    }

    public function airteltigo_bundles($filter = null)
    {
//        $result = $this->call('get_airteltigodata_product_id/', []); // old endpoint
        $result = $this->call('get_airteltigo_internet_bundles/', []); // new endpoint for bundles
        $list = [];
        if (isset($result['success']) && $result['success'] == true) {
//            return $result;
            foreach ($result['results'] as $result) {
                foreach ($result['bundles'] as $bundle) {
                    array_push($list, [
                        'package_name' => $result['name'], // eg, morning rush
                        'id' => $bundle['product_id'],
                        'price' => $bundle['amount'],
                        'description' => $bundle['validity'] == null ?
                            "{$bundle['name']} @ GHC {$bundle['amount']}" :
                            "{$bundle['name']} @ GHC {$bundle['amount']} - {$bundle['validity']}",
                        'size' => $bundle['name'],
                        'validity' => $bundle['validity'],
                    ]);
                }
            }
            $list = $this->airteltigo_filter($list, $filter);
            return [
                'success' => true,
                'bundles' => $list
            ];
        }
        return $result;
    }

    public function airteltigo_xtraUnlimited_bundles($filter = 'XTRA_UNLIMITED_CALLS')
    {
        $result = $this->call('get_airteltigodata_product_id/', []);
        $list = [];
        if (isset($result['success']) && $result['success']) {
            foreach ($result['bundles'] as $bundle) {
                array_push($list, [
                    'package_name' => 'XTRA_UNLIMITED_CALLS',
                    'id' => $bundle['product_id'],
                    'price' => $bundle['amount'],
                    'description' => $bundle['category'] == 'XTRA_UNLIMITED_CALLS' ?
                        "{$bundle['name']} @ GHC {$bundle['amount']} - {$bundle['validity']}" :
                        "{$bundle['name']}+{$bundle['name']} @ GHC {$bundle['amount']} - {$bundle['validity']}",
                    'size' => $bundle['name'],
                    'category' => $bundle['category'],
                    'validity' => $bundle['validity'],
                ]);
            }
            $list = $this->airteltigo_filter($list, $filter);
            return [
                'success' => true,
                'bundles' => $list
            ];
        }
        return $result;
    }

    private function airteltigo_filter($bundles, $filter)
    {
        if ($filter != null && in_array($filter, ['BigTime Data', 'Sika Kokoo', 'Morning Rush Data', 'XTRA_UNLIMITED_CALLS'])) {
            $result = array_filter($bundles, function ($product) use ($filter) {
                return $product['package_name'] == $filter;
            });
            return array_values($result);
        }
        return $bundles;
    }

    public function glo_types()
    {
        return $this->call('glo_data_get_bundle_types/', []);
    }

    public function new_glo_types()
    {
        return $this->call('new_glo_data_get_bundle_types/', []);
    }

    public function glo_bundles($bundle_type_id)
    {
        $data = ['bundle_type_id' => $bundle_type_id];
        $result = $this->call('glo_data_get_bundles/', $data);
        $list = [];
        if (isset($result['success']) && $result['success']) {
            foreach ($result['results'] as $bundle) {
                array_push($list, [
                    'id' => $bundle['productId'],
                    'description' => $bundle['name'],
                    'price' => $bundle['price'],
                    'volume' => $bundle['volume'],
                    'validity' => $bundle['validity']
                ]);
            }
            return [
                'success' => true,
                'bundles' => $list
            ];
        }
        return $result;
    }

    public function new_glo_bundles($bundle_type_id)
    {
        $data = ['bundle_type_id' => $bundle_type_id];
        $result = $this->call('new_glo_data_get_bundles/', $data);
        $list = [];
        if (isset($result['success']) && $result['success']) {
            foreach ($result['results'] as $bundle) {
                array_push($list, [
                    'id' => $bundle['productId'],
//                    'description' => $bundle['name'],
                    'description' => "{$bundle['name']} @ GHC {$bundle['price']} - {$bundle['validity']}",
                    'price' => $bundle['price'],
                    'volume' => $bundle['volume'],
                    'validity' => $bundle['validity'],
                ]);
            }
            return [
                'success' => true,
                'bundles' => $list
            ];
        }
        return [
            'status' => false,
        ];
    }

    public function glo_purchase($customer_number, $bundle_id, $amount, $transaction_id, $callback_url, $description = null)
    {
        $data = [
            'customer_number' => $customer_number,
            'bundle_id' => $bundle_id,
            'amount' => $amount,
            'transaction_id' => $transaction_id,
            'callback_url' => $callback_url
        ];
        $opt_data = ['description' => $description];
        $this->add_optional_data($data, $opt_data);

//        $result = $this->call('glo_data_purchase/', $data);
        $result = $this->call('new_glo_data_purchase/', $data);
        return $result;
    }

    public function new_glo_purchase($customer_number, $bundle_id, $amount, $transaction_id, $callback_url, $description = null)
    {
        $data = [
            'customer_number' => $customer_number,
            'bundle_id' => $bundle_id,
            'amount' => $amount,
            'transaction_id' => $transaction_id,
            'callback_url' => $callback_url
        ];
        $opt_data = ['description' => $description];
        $this->add_optional_data($data, $opt_data);

        $result = $this->call('new_glo_data_purchase/', $data);
        return $result;
    }

    public function etransact_validate($customer_number, $bill_type, $transaction_id)
    {
        $data = [
            'customer_number' => $customer_number,
            'bill_type' => $bill_type,
            'transaction_id' => $transaction_id
        ];
        return $this->call('etransact_validate_user/', $data);
    }

    public function new_etransact_validate($customer_number, $bill_type, $transaction_id)
    {
        $data = [
            'customer_number' => $customer_number,
            'bill_type' => $bill_type,
            'transaction_id' => $transaction_id
        ];
        return $this->call('utilities_validate_user/', $data);
//        $result = $this->call('new_etransact_validate_user/', $data);
//        Log::debug(json_encode($result));
    }

    public function prepaid_lookup($meter_code)
    {
        return $this->call('ecg_meter_lookup/', ['meter_code' => $meter_code]);
    }

    public function ecg_prepaid_pay($meter_code, $transaction_id, $amount, $meter_owner, $callback_url, $description = null)
    {
        $data = [
            'meter_code' => $meter_code,
            'meter_owner' => $meter_owner,
            'amount' => $amount,
            'transaction_id' => $transaction_id,
            'callback_url' => $callback_url
        ];

        $opt_data = ['description' => $description];
        $this->add_optional_data($data, $opt_data);
        return $this->call('ecg_prepaid_initiate_request/', $data);
    }


    public function petra_customer_lookup($petra_id)
    {
        $data = ['petra_id' => $petra_id];
        return $this->call('petra_customer_lookup/', $data);
    }

    public function petra_pay($customer_number, $amount, $transaction_id, $network_code, $callback_url, $payer_name, $description = null, $extra_info = null)
    {
        $data = [
            'customer_number' => $customer_number,
            'amount' => $amount,
            'external_transaction_id' => $transaction_id,
            'network_code' => $network_code,
            'callback_url' => $callback_url,


        ];

        $opt_data = [
            'description' => $description,
            'payer_name' => $payer_name,
            'extra_info' => $extra_info,
        ];
        $this->add_optional_data($data, $opt_data);
        return $this->call('petra/pay_premium/', $data);
    }


    public function validate_prudential_user($phone_number)
    {
        $data = ['phone_number' => $phone_number];
        return $this->call('prudential/validate_user/', $data);
    }

    public function prudential_service_form_request($phone_number)
    {
        $data = ['phone_number' => $phone_number];
        return $this->call('prudential/service_form_request/', $data);
    }

    public function prudential_policy_benefits($policy_number)
    {
        $data = ['policy_number' => $policy_number];
        return $this->call('prudential/policy_benefits/', $data);
    }

    public function prudential_validate_pin($phone_number, $pin)
    {
        $data = ['phone_number' => $phone_number, 'pin' => $pin];
        return $this->call('prudential/validate_pin/', $data);
    }

    public function prudential_reset_pin($phone_number, $pin)
    {
        $data = ['phone_number' => $phone_number, 'pin' => $pin];
        return $this->call('prudential/reset_pin/', $data);
    }

    public function prudential_policy_statement($phone_number, $policy_number)
    {
        $data = ['phone_number' => $phone_number, 'policy_number' => $policy_number];
        return $this->call('prudential/policy_statement/', $data);
    }

    public function prudential_change_pin($phone_number, $pin, $new_pin)
    {
        $data = ['phone_number' => $phone_number, 'pin' => $pin, 'new_pin' => $new_pin];
        return $this->call('prudential/change_pin/', $data);
    }

    public function prudential_update_email($phone_number, $email)
    {
        $data = ['phone_number' => $phone_number, 'email' => $email];
        return $this->call('prudential/update_email/', $data);
    }

    public function prudential_user_policy_list($phone_number, $unique_user_id)
    {
        $data = ['phone_number' => $phone_number, 'unique_user_id' => $unique_user_id];
        return $this->call('prudential/user_policy_list/', $data);
    }

    public function prudential_user_policy_detail($policy_number)
    {
        $data = ['policy_number' => $policy_number];
        return $this->call('prudential/user_policy_detail/', $data);
    }


    public function prudential_pay_premium($customer_number, $amount, $client_number, $policy_number, $policy_phone_number, $transaction_id, $network_code, $callback_url, $description, $client_name, $voucher_code = null, $payer_name = null, $extra_info = null)
    {
        $data = [
            'customer_number' => $customer_number,
            'amount' => $amount,
//            'external_transaction_id' => $transaction_id,
            'policy_phone_number' => $policy_phone_number,
            'policy_number' => $policy_number,
            'transaction_id' => $transaction_id,
            'network_code' => $network_code,
            'callback_url' => $callback_url,
            'client_number' => $client_number,
            'client_name' => $client_name,
            'description' => $description,
        ];
        Log::info('prudential_pay_premium_data: ' . json_encode($data));
        $opt_data = [
            'payer_name' => $payer_name,
            'extra_info' => $extra_info,
            'voucher_code' => $voucher_code,
        ];
        $this->add_optional_data($data, $opt_data);
        return $this->call('prudential/pay_premium/', $data);
    }

    public function etransact_pay(
        $customer_number, $bill_type, $transaction_id, $sender_name, $address, $amount, $callback_url,
        $description = null, $payer_name = null, $extra_info = null)
    {
        $data = [
            'customer_number' => $customer_number,
            'bill_type' => $bill_type,
            'transaction_id' => $transaction_id,
            'sender_name' => $sender_name,
            'address' => $address,
            'amount' => $amount,
            'callback_url' => $callback_url
        ];
        $opt_data = [
            'description' => $description,
            'payer_name' => $payer_name,
            'extra_info' => $extra_info
        ];
        $this->add_optional_data($data, $opt_data);
        return $this->call('etransact_pay_bill/', $data);
    }

    public function new_etransact_pay(
        $customer_number, $bill_type, $transaction_id, $sender_name, $address, $amount, $callback_url,
        $customer_phone = null, $description = null, $payer_name = null, $extra_info = null)
    {
        $data = [
            'customer_number' => $customer_number,
            'bill_type' => $bill_type,
            'transaction_id' => $transaction_id,
            'sender_name' => $sender_name,
            'address' => $address,
            'amount' => $amount,
            'callback_url' => $callback_url
        ];
        $opt_data = [
            'description' => $description,
            'payer_name' => $payer_name,
            'extra_info' => $extra_info,
            'customer_phone_number' => $customer_phone
        ];
        $this->add_optional_data($data, $opt_data);
        return $this->call('new_etransact_pay_bill/', $data);
    }

    public function transaction_status($transaction_id)
    {
        $data = [
            'transaction_id' => $transaction_id
        ];
        return $this->call('transaction_status/', $data);
    }

    public function mtn_recurring_create_mandate(
        $customer_number, $transaction_id, $amount, $mandate_creation_callback_url, $debit_customer_callback_url,
        $debit_day, $frequency_type, $frequency = 1, $start_date = 'today', $end_date = 'infinite',
        $description = null, $payer_name = null, $extra_info = null)
    {
        $data = [
            'customer_number' => Util::number233Format($customer_number),
            'transaction_id' => $transaction_id,
            'amount' => $amount,
            'frequency_type' => $frequency_type,
            'frequency' => $frequency,
            'start_date' => $start_date,
            'end_date' => $end_date,
            'mandate_creation_call_back_url' => $mandate_creation_callback_url,
            'debit_customer_call_back_url' => $debit_customer_callback_url,
            'debit_day' => $debit_day
        ];
        $opt_data = [
            'description' => $description,
            'payer_name' => $payer_name,
            'extra_info' => $extra_info
        ];
        $this->add_optional_data($data, $opt_data);
        return $this->call('mtn_recurring_create_mandate/', $data);
    }

    public function mtn_recurring_update_mandate(
        $customer_number, $transaction_id, $amount, $mandate_id,
        $debit_day, $frequency_type, $frequency = 1, $start_date = 'today', $end_date = 'infinite',
        $description = null, $payer_name = null, $extra_info = null)
    {
        $data = [
            'customer_number' => Util::number233Format($customer_number),
            'transaction_id' => $transaction_id,
            'amount' => $amount,
            'frequency_type' => $frequency_type,
            'frequency' => $frequency,
            'start_date' => $start_date,
            'end_date' => $end_date,
            'mandate_id' => $mandate_id,
            'debit_day' => $debit_day
        ];
        $opt_data = [
            'description' => $description,
            'payer_name' => $payer_name,
            'extra_info' => $extra_info
        ];
        $this->add_optional_data($data, $opt_data);
        return $this->call('mtn_recurring_update_mandate/', $data);
    }

    public function mtn_recurring_cancel_mandate($customer_number, $transaction_id, $mandate_id, $description = null)
    {
        $data = [
            'customer_number' => Util::number233Format($customer_number),
            'transaction_id' => $transaction_id,
            'mandate_id' => $mandate_id
        ];
        $opt_data = [
            'description' => $description
        ];
        $this->add_optional_data($data, $opt_data);
        return $this->call('mtn_recurring_cancel_mandate/', $data);
    }

    public function mtn_recurring_cancel_pre_approval($customer_number)
    {
        $data = [
            'customer_number' => Util::number233Format($customer_number)
        ];
        return $this->call('mtn_recurring_cancel_pre_approval/', $data);
    }

    public function mtn_recurring_check_mandate_status($transaction_id)
    {
        $data = [
            'transaction_id' => $transaction_id
        ];
        return $this->call('mtn_recurring_check_mandate_status/', $data);
    }

    public function authorized_bank_list()
    {
        return $this->call('authorized_bank_list/', []);
    }

    public function authorized_customer_lookup($bank_account_number, $bank_code)
    {
//        $data = ['bank_code' => $bank_code, 'bank_account_number' => $bank_account_number];
        $data = ['bank_code' => $bank_code, 'customer_number' => $bank_account_number];
        return $this->call('authorized_customer_lookup/', $data);
    }

    // Brassica endpoints

    public function brassica_vending_meter_info($meter_number, $account_number = null)
    {
        $data = ['meter_number' => $meter_number, 'account_number' => $account_number ?? ''];
        return $this->call('ecg_vending_get_meter_info/', $data);
    }

    public function brassica_vending_prepaid_inquiry(
        $meter_serial, $meter_provider, $region_id,
        $district_id, $card_buffer, $meter_model, $card_id)
    {

        $data = [
            'meter_serial' => $meter_serial,
            'meter_provider' => $meter_provider,
            'region_id' => $region_id,
            'district_id' => $district_id,
            'card_buffer' => $card_buffer,
            'meter_model' => $meter_model ?? '',
            'card_id' => $card_id ?? ''
        ];

        Log::info('INQUIRY_PREPAID: ' . json_encode($data));
//        return parent::brassica_exchange(
//            'ecg_vending_prepaid_inquiry/', $data, 'post', $this->getHmacValue($data), $this->client_id);
        return $this->call('ecg_vending_prepaid_inquiry/', $data);
    }

    public function brassica_vending_prepaid_charge(
        $meter_serial, $meter_number, $meter_provider, $region_id, $district_id,
        $card_buffer, $external_transaction_id, $amount, $customer_name, $approval_code = null, $meter_model = null, $card_id = null, $consumer_version = null,
        $description = null,
    )
    {
        $data = [
            'meter_serial' => $meter_serial,
            'meter_number' => $meter_number,
            'meter_provider' => $meter_provider,
            'region_id' => $region_id,
            'district_id' => $district_id,
            'card_buffer' => $card_buffer,
            'external_transaction_id' => $external_transaction_id,
            'amount' => $amount,
            'customer_name' => $customer_name,
            'approval_code' => $approval_code ?? '',
            'meter_model' => $meter_model ?? '',
            'card_id' => $card_id ?? '',
            'consumer_version' => $consumer_version ?? '',
            'description' => $description ?? ''
        ];
        return $this->call('ecg_vending_prepaid_charge/', $data);
    }

    public function brassica_vending_prepaid_repair(
        $meter_serial, $meter_number, $meter_provider, $region_id, $district_id,
        $card_buffer, $external_transaction_id, $amount, $customer_name, $meter_model = null, $card_id = null,
        $consumer_version = null, $approval_code = null,
        $description = null,
    )
    {
        $data = [
            'meter_serial' => $meter_serial,
            'meter_number' => $meter_number,
            'meter_provider' => $meter_provider,
            'region_id' => $region_id,
            'district_id' => $district_id,
            'card_buffer' => $card_buffer,
            'external_transaction_id' => $external_transaction_id,
            'amount' => $amount,
            'customer_name' => $customer_name,
            'meter_model' => $meter_model ?? '',
            'card_id' => $card_id ?? '',
            'consumer_version' => $consumer_version ?? '',
            'approval_code' => $approval_code ?? '',
            'description' => $description ?? ''
        ];
        return $this->call('ecg_vending_prepaid_repair/', $data);
    }


    // Hubtel ECG Endpoints
    public function ecg_prepaid_postpaid_account_inquiry($meter_number)
    {
        $data = ['power_app_number' => $meter_number];
        return $this->call('ecg_prepaid_postpaid_account_inquiry/', $data);
    }

    public function ecg_prepaid_postpaid_topup_account($meter_number, $destination, $transaction_id, $amount, $callback_url, $description = null)
    {
        $data = [
            'bundle' => $meter_number,
            'destination' => $destination,
            'transaction_id' => $transaction_id,
            'amount' => $amount,
            'callback_url' => $callback_url
        ];

        $opt_data = [
            'description' => $description
        ];
        $this->add_optional_data($data, $opt_data);
        return $this->call('ecg_prepaid_postpaid_topup_account/', $data);
    }
}
